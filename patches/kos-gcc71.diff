--- kos-orig/addons/libppp/ipcp.c	2019-08-19 18:41:38.250000000 -0400
+++ kos/addons/libppp/ipcp.c	2019-08-19 14:03:49.640000000 -0400
@@ -555,6 +555,7 @@
             ipcp_state.resend_pkt = NULL;
             ipcp_state.resend_timeout = NULL;
             ipcp_state.state = PPP_STATE_STOPPING;
+	    __attribute__ ((fallthrough));
 
         default:
             return -1;
diff -bur kos-orig/addons/libppp/lcp.c kos/addons/libppp/lcp.c
--- kos-orig/addons/libppp/lcp.c	2019-08-19 18:41:38.250000000 -0400
+++ kos/addons/libppp/lcp.c	2019-08-19 14:03:17.380000000 -0400
@@ -843,6 +843,7 @@
             lcp_state.resend_pkt = NULL;
             lcp_state.resend_timeout = NULL;
             lcp_state.state = PPP_STATE_STOPPING;
+	    __attribute__ ((fallthrough));
 
         default:
             return -1;
diff -bur kos-orig/addons/libppp/ppp.c kos/addons/libppp/ppp.c
--- kos-orig/addons/libppp/ppp.c	2019-08-19 18:41:38.250000000 -0400
+++ kos/addons/libppp/ppp.c	2019-08-19 14:02:30.620000000 -0400
@@ -364,6 +364,7 @@
                             expect = EXPECT_DATA;
                             /* Fall through... */
                         }
+			__attribute__ ((fallthrough));
 
                     case EXPECT_DATA:
                         if(ppp_recvbuf_len < PPP_MRU + 4) {
diff -bur kos-orig/include/assert.h kos/include/assert.h
--- kos-orig/include/assert.h	2019-08-19 18:41:38.290000000 -0400
+++ kos/include/assert.h	2019-08-19 13:57:17.350000000 -0400
@@ -42,7 +42,7 @@
     \param  e               A value or expression to be evaluated as true or
                             false.
 */
-#   define assert(e)        ((e) ? (void)0 : __assert(__FILE__, __LINE__, #e, NULL, __FUNCTION__))
+#   define assert(e)        ((e) ? (void)0 : __assert(__FILE__, __LINE__, #e, NULL,  __func__))
 
 /** \brief  assert() with a custom message.
 diff -bur kos-orig/include/assert.h kos/include/assert.h
--- kos-orig/kernel/arch/dreamcast/include/dc/pvr.h	2019-08-10 13:23:29.420000000 -0400
+++ kos/kernel/arch/dreamcast/include/dc/pvr.h	2019-08-10 13:41:04.920000000 -0400
@@ -834,8 +834,15 @@
     \return                 The packed coordinates
 */
 static inline uint32 PVR_PACK_16BIT_UV(float u, float v) {
-    return (((*((uint32 *) &u)) >> 0) & 0xFFFF0000) |
-           (((*((uint32 *) &v)) >> 16) & 0x0000FFFF);
+    union
+    {
+        float f;
+        uint32 i;
+    } _u, _v;
+    _u.f = u;
+    _v.f = v;
+    return ((_u.i >> 0) & 0xFFFF0000) |
+           ((_v.i >> 16) & 0x0000FFFF);
 }
 
 /** \defgroup pvr_commands          TA command values
diff -Naur '--exclude=.git' kos-orig/kernel/arch/dreamcast/kernel/init.c kos/kernel/arch/dreamcast/kernel/init.c
--- kos-orig/kernel/arch/dreamcast/kernel/init.c	2019-08-22 13:27:49.360000000 -0400
+++ kos/kernel/arch/dreamcast/kernel/init.c	2019-08-22 13:57:31.990000000 -0400
@@ -43,6 +43,9 @@
 };
 int dbgio_handler_cnt = sizeof(dbgio_handlers) / sizeof(dbgio_handler_t *);
 
+void  __attribute__((weak, optimize("O0"))) arch_init_hook() {}
+void  __attribute__((weak, optimize("O0"))) arch_shutdown_hook() {}
+
 /* Auto-init stuff: comment out here if you don't like this stuff
    to be running in your build, and also below in arch_main() */
 /* #if 0 */
@@ -147,11 +150,14 @@
             }
         }
     }
+    arch_init_hook();
 
     return 0;
 }
 
 void  __attribute__((weak)) arch_auto_shutdown() {
+    arch_shutdown_hook();
+
     fs_dclsocket_shutdown();
     net_shutdown();
 
@@ -262,6 +268,8 @@
     switch(arch_exit_path) {
         default:
             dbglog(DBG_CRITICAL, "arch: arch_exit_path has invalid value!\n");
+           arch_return();
+            break;
         case ARCH_EXIT_RETURN:
             arch_return();
             break;